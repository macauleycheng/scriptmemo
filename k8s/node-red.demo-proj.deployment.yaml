kind: Deployment
apiVersion: apps/v1
metadata:
  name: node-red
  namespace: demo-proj
  labels:
    app: node-red
  annotations:
    deployment.kubernetes.io/revision: '4'
    kubesphere.io/creator: admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-red
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: node-red
      annotations:
#        kubesphere.io/creator: admin
#        kubesphere.io/restartedAt: '2023-02-13T03:04:40.281Z'
        logging.kubesphere.io/logsidecar-config: '{}'
    spec:
      volumes:
        - name: volume-s9kqvu
          persistentVolumeClaim:
            claimName: mars-download
        - name: config-volume
          configMap:
            name: mysql
            items:
              - key: BEMS2.sql
                path: BEMS2.sql
              - key: LBS_TW.sql
                path: LBS_TW.sql
              - key: NativeAppliance.sql
                path: NativeAppliance.sql
            defaultMode: 420
      containers:
        - name: container-mysql
          image: mysql
          ports:
            - name: tcp-3306
              containerPort: 3306
              protocol: TCP
            - name: tcp-33060
              containerPort: 33060
              protocol: TCP
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: nova
            - name: MYSQL_USER
              value: meta
            - name: MYSQL_PASSWORD
              value: meta@3306
          resources: {}
          volumeMounts:
            - name: config-volume
              readOnly: true
              mountPath: /docker-entrypoint-initdb.d/
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: container-node-red
          image: nodered/node-red
          ports:
            - name: tcp-1880
              containerPort: 1880
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: volume-s9kqvu
              mountPath: /data
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: default
      serviceAccount: default
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---
kind: Service
apiVersion: v1
metadata:
  name: node-red
  namespace: demo-proj
  labels:
    app: node-red
  annotations:
#    kubesphere.io/creator: admin
spec:
  ports:
    - name: tcp-1880
      protocol: TCP
      port: 1880
      targetPort: 1880
      nodePort: 31843
  selector:
    app: node-red
#  clusterIP: 10.233.33.119
#  clusterIPs:
#    - 10.233.33.119
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  internalTrafficPolicy: Cluster
